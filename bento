#!/bin/bash
source "/var/brunch/toolkit/toolkit.cfg"

#<~> Bento boxes - Brunch's ENhanced Text Options
#
# This is the code that makes boxes possible,
# When 'bento_boxes=disabled' then the script will not draw boxes.
#
bento_version="1.0.4"
bento_usage(){

# Set variables to use in the menu
  bento_help_menu_title=("Bento $bento_version - Help Menu")
  bento_help_menu_contents=("Welcome to Bento." "Brunch's ENhanced Text Options")
  bento_help_menu_options=("Usage" "Examples" "Support" "Exit")
  bento_help_menu_tooltips=("How to use Bento" "How this menu was made" "Where to get support" "Exit")

# Use bento to generate a textbox and menu from the above variables
  bento -g -t "$bento_help_menu_title" -c "${bento_help_menu_contents[@]}" -m "${bento_help_menu_options[@]}" -s "${bento_help_menu_tooltips[@]}"

# Set a return point using function names, then parse selection.
  previous_menu="bento_usage"
  case "$selection" in
    "Usage") bento_usage_sub1 ; return ;;
    "Examples") bento_usage_sub2 ; return ;;
    "Support") bento_usage_sub3 ; return ;;
    "Exit") exit 0 ;;
  esac
 }

bento_usage_sub3(){
    clear
# make a textbox with a link to discord and some minor info about this script
    bento -t "Bento - Further Support" -c "This whole project was made by a beginner, and has been modified greatly over time as they learned more." "If you'd like to know anything specific, you can find Wisteria in the Brunch discord group." " " "https://discord.gg/x2EgK2M" -r
}

bento_usage_sub2(){
    clear
# make a textbox to describe the content of this page
    bento -t "Bento - Examples" -c "Here is how the previous menu was made:"

# output the main help menu's code as an example
echo 'bento_usage(){

# Set variables to use in the menu
  bento_help_menu_title=("Bento - Help Menu")
  bento_help_menu_contents=("Welcome to Bento." "Brunchs ENhanced Text Options")
  bento_help_menu_options=("Usage" "Examples" "Support" "Exit")
  bento_help_menu_tooltips=("How to use Bento" "How this menu was made" "Where to get support" "Exit")

# Use bento to generate a textbox and menu from the above variables
  bento -g -t "$bento_help_menu_title" -c "${bento_help_menu_contents[@]}" -m "${bento_help_menu_options[@]}" -s "${bento_help_menu_tooltips[@]}"

# Set a return point using function names, then parse selection.
  previous_menu="bento_usage"
  case "$selection" in
    "Usage") bento_usage_sub1 ; return ;;
    "Examples") bento_usage_sub2 ; return ;;
    "Support") bento_usage_sub3 ; return ;;
    "Exit") exit 0 ;;
  esac
 }'

# make another textbox with the -n (noclear) flag to have multiple textboxes on screen
    bento -c "As you can see, the main command is bento with a handful of flags and arrays afterwards. Then we use something like case to parse the selection made in the menu, and send users off to their destinations." -r -n
}

bento_usage_sub1(){
    clear
# One very large formatted array. It's split by line between elements to more easily align content
    bento_usage_contents=(
    "Basic Usage - Flags accepting options"
    ""
    "These flags are all meant to be used with options afterwards to generate content."
    'Options can be strings, $variables or ${arrays[@]}. The format is: -flag $option'
    ""
    "(-c|--content)     The following options will make up the textbox. (like this one!) "
    "(-m|--menu)        The options listed here will become selectable options for the user."
    "(-mm|--multimenu)  The options here can be toggled and multiselected together"
    "(-s|--subtitles)   These options act as on screen tooltips for the menu options."
    "(-t|--title)       This will define the titlebar displayed at the top of the box."
    "div"
    "Advanced Usage - Special flags"
    ""
    "The following flags do not accept options, and can be used to modify your boxes."
    ""
    "(-b|--boxless)     This option will disable box drawing and just display plain text."
    "(-g|--glyph)       This option turns on doublelined boxes, like what this menu uses."
    "(-n|--noclear)     Prevent Bento clearing the screen before and after making boxes."
    '(-w|--write)       User input is directed into the $selection variable'
    ""
    "(-a|--arrows)      Displays a small usage tip for selecting items in the menu. "
    "(-e|--exit)        Displays a small usage tip for exiting the script."
    '(-r|--return)      Displays a small usage tip for returning to the $previous_menu.'
    "(-x|--toggle)      Displays a small useage tip for toggling options on or off."
    "                   (This also will switch menu selection to toggle mode.)"
    "div"
    "Other useful features"
    ""
    "Array elements matching 'div' or ' ' (empty) will create dividers and spaces."
    "Array elements matching 'lid' or 'btm' will create seperate box tops and bottoms."
    "Textboxes will attempt to size themselves according to the user's terminal."
    "If a user's screen is too small, bento will not draw boxes to keep things simple."
    "If content does not fit on one line in a textbox, it will attempt to wordwrap."
    "div"
    "Alignment"
    ""
    "Elements can be aligned with a wide degree of customization."
    ""
    "(-ra|--rightaligned) (-la|--leftaligned)                   Align all text"
    "(-tra|--titlerightaligned) (-tla|--titleleftaligned)       Align title text"
    "(-cra|--contentrightaligned) (-cla|--contentrightaligned)  Align content text"
    "(-sra|--subrightaligned) (-sla|--subleftaligned)           Align tooltip text"
    "(-mra|--menurightaligned) (-mca|--menucenteraligned)       Align menu text"
    "(note that menu text defaults to be left aligned, all other text is centered)"
    )

# Make a simple box based on the above array.
    bento -t "Bento - Usage" -cla -c "${bento_usage_contents[@]}" -r
}

#<~> Bento funtions
bento(){
    if [[ -z "$*" ]] ; then
        bento_usage
    fi
    # preset variable defaults to keep menus from acidentally merging into eachother
    terminal_width=$(tput cols)             # query the Terminfo database: number of columns
    box_width=$(( terminal_width - 8 ))     # set the width of the box with a buffer
    if [[ "$bento_boxes" == "disabled" ]] ; then
        boxless="true"
    elif (( terminal_width < 50 )) ; then
      boxless="true"
    else
      boxless="false"
    fi
    glyph="─"
    noclear="false"
    keys_opt_arrows="Arrow Keys Up/Down (↑/↓)  Press Enter (⏎) to select."
    keys_opt_return="Press Enter (⏎) to return to the previous menu."
    keys_opt_exit="Press Enter (⏎) to continue."
    keys_opt_input="Type your selection, then press Enter (⏎) to continue."
    keys_opt_toggle=("Arrow Keys Up/Down (↑/↓)  Press Enter (⏎) to toggle." "Options marked with ◯ are disabled, ◆ are enabled.")
    arrows="false"
    return="false"
    toggle="false"
    rightaligned="false"
    leftaligned="false"
    crightaligned="false"
    cleftaligned="false"
    trightaligned="false"
    tleftaligned="false"
    srightaligned="false"
    sleftaligned="false"
    mrightaligned="false"
    mcenteraligned="false"
    multiselection="false"
    exit="false"
    input="false"
    # parse bento flags here
    PARAMS=""
while (( "$#" )); do
  case "$1" in
    -w|--write)
    # set $selection to a written in input with read
      input="true"
      shift
      ;;
    -ra|--rightaligned)
    # Align all text to the right
      rightaligned="true"
      shift
      ;;
    -la|--leftaligned)
    # Align all text to the left
      leftaligned="true"
      shift
      ;;
    -cra|--contentrightaligned)
    # Align all -c content to the right
      crightaligned="true"
      shift
      ;;
    -cla|--contentleftaligned)
    # Align all -c content to the left
      cleftaligned="true"
      shift
      ;;
    -tra|--titlerightaligned)
    # Align -t title to the right
      trightaligned="true"
      shift
      ;;
    -tla|--titleleftaligned)
    # Align -t title to the left
      tleftaligned="true"
      shift
      ;;
    -sra|--subrightaligned)
    # Align -s subtitle/tooltips to the right
      srightaligned="true"
      shift
      ;;
    -sla|--subleftaligned)
    # Align -s subtitle/tooltips to the right
      sleftaligned="true"
      shift
      ;;
    -mra|--menurightaligned)
    # Align -m menu options to the right
      mrightaligned="true"
      shift
      ;;
    -mca|--menucenteraligned)
    # Align -m menu options to the left
      mcenteraligned="true"
      shift
      ;;
    -b|--boxless)
    # Dont draw boxes (sets all box components to "")
      boxless="true"
      shift
      ;;
    -u|--update)
    # Display bento help menu
      bento_update
      exit 0
      ;;
    -i|--install)
    # Display bento help menu
      bento_install
      exit 0
    ;;
    -h|--help)
    # Display bento help menu
      bento_usage
      exit 0
      ;;
    -d|--debug)
    # Display bento debug menu
      bento_debug
      exit 0
      ;;
    -a|--arrows)
    # displays: "Arrow Keys Up/Down (↑/↓)  Press Enter (⏎) to select." under content
      arrows="true"
      shift
      ;;
    -r|--return)
    # displays: "Press Enter (⏎) to return to the previous menu." under content
    # waits for input then returns to $previous_menu
      return="true"
      shift
      ;;
    -e|--exit)
    # displays: "Press Enter (⏎) to continue." under content
    # waits for input, does not set a $selection and continues to next function
      exit="true"
      shift
      ;;
    -x|--toggle)
    # Work in progress
    # displays: "Arrow Keys Up/Down (↑/↓)  Press Enter (⏎) to toggle." "Options marked with ◯ are disabled, ◆ are enabled." under content
      toggle="true"
      shift
      ;;
    -g|--glyph)
    # Sets textbox borders to doublelined bars
      glyph="true"
      shift
      ;;
    -n|--noclear)
    # does not 'clear' when starting a textbox
      noclear="true"
      shift
      ;;
    -t|--title)
    # displays all options until the next -flag as a title, supports multiple lines
      if [ -n "$2" ] ; then
          # shift to next variable, the -flag is not included
          shift 1
          array=("$@")
          for ((i = 0; i < ${#array[@]}; ++i)); do
          # keep looping for every option to add them to our array
          if [[ "${array[$i]}" == -* ]] ; then
              break # end loop at next flag
          else
              title+=("${array[$i]}")
          fi
          done
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -c|--content)
    # displays all options until the next -flag as content, supports multiple lines
      if [ -n "$2" ] ; then
          # shift to next variable, the -flag is not included
          shift 1
          array=("$@")
          for ((i = 0; i < ${#array[@]}; ++i)); do
          # keep looping for every option to add them to our array
          if [[ "${array[$i]}" == -* ]] ; then
              break # end loop at next flag
          else
              content+=("${array[$i]}")
          fi
          done
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -m|--menu)
    # displays all options until the next -flag as menu options, supports multiple lines
      if [ -n "$2" ] ; then
          # shift to next variable, the -flag is not included
          shift 1
          array=("$@")
          for ((i = 0; i < ${#array[@]}; ++i)); do
          # keep looping for every option to add them to our array
          if [[ "${array[$i]}" == -* ]] ; then
              break # end loop at next flag
          else
              menu+=("${array[$i]}")
          fi
          done
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
  -mm|--multimenu)
  # displays all options until the next -flag as menu options, supports multiple lines
    if [ -n "$2" ] ; then
        # shift to next variable, the -flag is not included
        shift 1
        array=("$@")
        for ((i = 0; i < ${#array[@]}; ++i)); do
        # keep looping for every option to add them to our array
        if [[ "${array[$i]}" == -* ]] ; then
            break # end loop at next flag
        else
            multimenu+=("${array[$i]}")
        fi
        done
        # to allow for multiple selections, add a confirmation option at the end and set a var
            multimenu+=("Confirm Selection")
            # let the script know we're doing something complicated here
            multiselection="true"
    else
      echo "Error: Argument for $1 is missing" >&2
      exit 1
    fi
    ;;
    -s|--subtitles)
    # displays all options until the next -flag as tooltip text, supports multiple lines
      if [ -n "$2" ] ; then
          # shift to next variable, the -flag is not included
          shift 1
          array=("$@")
          for ((i = 0; i < ${#array[@]}; ++i)); do
          # keep looping for every option to add them to our array
          if [[ "${array[$i]}" == -* ]] ; then
              break # end loop at next flag
          else
              submenu+=("${array[$i]}")
          fi
          done
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    --*=|-*) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

    if [[ "$noclear" == false ]] ; then
    clear
    fi

# generate the title
    if [[ -n "$title" ]] ; then
        # set alignment
        if [[ "$trightaligned" == "true" ]] ; then
            rightaligned="true"
        elif [[ "$tleftaligned" == "true" ]] ; then
            leftaligned="true"
        fi
        # if boxes are disabled, dont bother with formattting
        if [[ "$boxless" == "false" ]] ; then
            echo ""
            # make top of the box
            bento_vars
            printf "  ${top_left_corner}${left_bar}${topbar}${right_bar}${top_right_corner}\n"
        fi
        # loop for each line in the box
        for line in "${title[@]}"; do
            bento_vars
            # if the text is too long, split it into another line
            if (( (text_width + 8) > terminal_width )) ; then
                long_title="$(echo "$line" | fold -w $box_width -s)"
                IFS=$'\n'
                multi_array=($long_title)
                unset IFS
                multititle "${multi_array[@]}"
            else
                printf "  ${left_wall}\033[7m${title_left_border}${filler}${line}${filler}${title_right_border}\033[27m${right_wall}\n"
            fi
        done
        # if theres no content, make a box bottom instead of a divider
        if [[ -z "$content" ]] && [[ "$boxless" == "false" ]] ; then
            printf "  ${btm_left_corner}${left_bar}${topbar}${right_bar}${btm_right_corner}\n"
        elif [[ -n "$content" ]] && [[ "$boxless" == "false" ]] ; then
            printf "  ${left_div_wall}${left_bar}${topbar}${right_bar}${right_div_wall}\n"
        fi
    else
        # if theres no title, just make the top of the box
        echo ""
        bento_vars
        printf "  ${top_left_corner}${left_bar}${topbar}${right_bar}${top_right_corner}\n"
    fi
        # unset alignment if it was only for this section
        if [[ "$trightaligned" == "true" ]] || [[ "$tleftaligned" == "true" ]] ; then
            rightaligned="false"
            leftaligned="false"
        fi

    # generate the content
    if [[ -n "$content" ]] ; then
        # set alignment
        if [[ "$crightaligned" == "true" ]] ; then
            rightaligned="true"
        elif [[ "$cleftaligned" == "true" ]] ; then
            leftaligned="true"
        fi
        # loop for each line in the box
        for line in "${content[@]}"; do
            bento_vars
            # if the text is too long, split it into another line
            if (( (text_width + 8) > terminal_width )) ; then
            long_content="$(echo "$line" | fold -w $box_width -s)"
            IFS=$'\n'
            multi_array=($long_content)
            unset IFS
            multibox "${multi_array[@]}"
            else
            printf "  ${left_wall}${left_border}${filler}${line}${filler}${right_border}${right_wall}\n"
            fi
        done
        if [[ "$boxless" == "false" ]] ; then
            printf "  ${btm_left_corner}${left_bar}${topbar}${right_bar}${btm_right_corner}\n"
        fi
    fi

# display optional guides
    if [[ "$arrows" == "true" ]] || [[ "$return" == "true" ]] || [[ "$exit" == "true" ]] || [[ "$toggle" == "true" ]] ; then
        if [[ "$arrows" == "true" ]] ; then
            line="${keys_opt_arrows}"
        elif [[ "$return" == "true" ]] ; then
            menu="previous_menu"
            line="${keys_opt_return}"
        elif [[ "$exit" == "true" ]] ; then
            menu="previous_menu"
            line="${keys_opt_exit}"
        elif [[ "$input" == "true" ]] ; then
            line="${keys_opt_input}"
        elif [[ "$toggle" == "true" ]] ; then
            line="${keys_opt_toggle}"
        fi
        bento_vars
        if (( (text_width + 8) > terminal_width )) ; then
            long_content="$(echo "$line" | fold -w $box_width -s)"
            IFS=$'\n'
            multi_array=($long_content)
            unset IFS
            multistep "${multi_array[@]}"
        else
            printf "     ${left_border}${line}${right_border} \n"
        fi
    fi

    # unset alignment if it was only for this section
    if [[ "$crightaligned" == "true" ]] || [[ "$cleftaligned" == "true" ]] ; then
        rightaligned="false"
        leftaligned="false"
    fi

    # generate the menu
    if [[ -n "$menu" ]] || [[ -n "$multimenu" ]]; then
            echo ""
            menumaker
    fi

    # if using a user-generated input...
    if [[ "$input" == "true" ]] ; then
        echo ""
        input_reader
        selection="$input_selection"
    fi

    bento_cleanup
}

input_reader(){
    input_selection=""
    if [[ "$boxless" == "true" ]] ; then
        b="-b"
    fi
    read -p ' >> ' input_selection
    bento_cleanup
    if [[ -z "$input_selection" ]] ; then
    bento $b -t "Confirm" -c "Continue without entering anything?" -m "Yes" "No" "Back" "Exit" -s "Confirm entry" "Try again" "Go back to the previous menu" "Exit without saving"
    else
    bento $b -t "Confirm" -c "Is this correct?" "$input_selection" -m "Yes" "No" "Back" "Exit" -s "Confirm entry" "Try again" "Go back to the previous menu" "Exit without saving"
    fi
    case "$selection" in
        "Yes") return ;;
        "No") input_reader ; return ;;
        "Back") $previous_menu ; return ;;
        "Exit") exit 0 ;;
    esac

}

menumaker(){
    unset selection
    if [[ "$multiselection" == "true" ]] ; then
        if [[ -n "${menu[*]}" ]] ; then
            for ((i = 0; i < ${#menu[@]}; ++i)); do
                # keep looping for every option to add them to our array
                multimenu+=("${menu[$i]}")
            done
            unset menu
        fi
        for ((i = 0; i < ${#multimenu[@]}; ++i)); do
            # keep looping for every option to add them to our array
            menu+=("${multimenu[$i]}")
        done
        unset multimenu
    fi
    select_opt "${menu[@]}"
        # parse selection
        if [[ "$selection" == "previous_menu" ]] ; then
            bento_cleanup
            unset selection
            $previous_menu
        elif [[ -n "$selection" ]] ; then
        echo ""
        echo ""
                echo "[o] User selected: ${selection[*]}"
        fi
        bento_cleanup
}

bento_cleanup(){
    # cleanup arrays for next box
    unset title
    unset content
    unset menu
    unset multimenu
    unset submenu
    unset line
    unset long_title
    unset long_content
    unset multi_array
    unset array
    unset multi
}

bento_vars(){
    padding="2"
    text_width=${#line}
    size_limit=$(( text_width + 8 ))
    if (( size_limit < 40 )) ; then
      size_limit="40"
    fi
    title_text_width=${#line}
    title_size_limit=$(( title_text_width + 8 ))
    if (( title_size_limit < 40 )) ; then
      title_size_limit="40"
    fi
    # Glyph settings
    filler=" "                              # box filler, just use spaces
    title_filler="░"                        # title box filler
    # make matching corners and walls as necessary
      possible_bars=(─ ═)
     left_div_walls=(├ ╠)
    right_div_walls=(┤ ╣)
   top_left_corners=(┌ ╔)
   btm_left_corners=(└ ╚)
  top_right_corners=(┐ ╗)
  btm_right_corners=(┘ ╝)
              walls=(│ ║)
  if [[ "$glyph" == "true" ]] ; then
      top_left_corner="╔"
      top_right_corner="╗"
      btm_left_corner="╚"
      btm_right_corner="╝"
      left_wall="║"
      right_wall="║"
      left_div_wall="╠"
      right_div_wall="╣"
      topbar="═"
  else
      top_left_corner="┌"
      top_right_corner="┐"
      btm_left_corner="└"
      btm_right_corner="┘"
      left_wall="│"
      right_wall="│"
      left_div_wall="├"
      right_div_wall="┤"
      topbar="─"
  fi
    # some bars are a bit short, align them appropriately
    short_bars=(─━┄┅┈┉╌╍═░▒▓)
    if [[ "${short_bars[@]}" =~ "$topbar" ]] && [[ "${short_bars[@]}" != "" ]]; then
    bar_width=$(( ((terminal_width - (padding * 2) - 1) / 2) - 1 ))
    else
    bar_width=$(( ((terminal_width - (padding * 2) - 1) / 2) - 2 ))
    fi
    border_width=$(( ((terminal_width - (padding * 2) - text_width) / 2) - 2 ))
    title_border_width=$(( ((terminal_width - (padding * 2) - title_text_width) / 2) - 2 ))
    border=                         # shape of the border
    title_border=                         # shape of the border
    bar=

    # special search/replace for making dividers

    # special search/replace for making dividers
    if [[ "$line" == "div" ]] ; then
        line="$topbar$topbar$topbar"
        filler="$topbar"
        title_filler="$topbar"
        left_wall="$left_div_wall"
        right_wall="$right_div_wall"

    elif [[ "$line" == "lid" ]] ; then
        line="$topbar$topbar$topbar"
        filler="$topbar"
        title_filler="$topbar"
        left_wall="$top_left_corner"
        right_wall="$top_right_corner"

    elif [[ "$line" == "btm" ]] ; then
        line="$topbar$topbar$topbar"
        filler="$topbar"
        title_filler="$topbar"
        left_wall="$btm_left_corner"
        right_wall="$btm_right_corner"

    fi
    # create the border (left side or right side)
    for ((i=0; i<border_width; i++))
    do
        border+="${filler}"
    done
    for ((i=0; i<title_border_width; i++))
    do
        title_border+="${title_filler}"
    done
    # create the topbar (left side or right side)
    for ((i=0; i<bar_width; i++))
    do
        bar+="${topbar}"
    done
    # a side of the border may be longer (e.g. the right border)
    if (( ( terminal_width - ( padding * 2 ) - text_width ) % 2 == 0 ))
    then
        # the left and right borders have the same width
        left_border="$border"
        right_border="$left_border"
    else
        # the right border has one more character than the left border
        # the text is aligned leftmost
        left_border="$border"
        right_border="$left_border$filler"
    fi
    # a side of the border may be longer (e.g. the right border)
    if (( ( terminal_width - ( padding * 2 ) - title_text_width ) % 2 == 0 ))
    then
        # the left and right borders have the same width
        title_left_border="$title_border"
        title_right_border="$title_left_border"
    else
        # the right border has one more character than the left border
        # the text is aligned leftmost
        title_left_border="$title_border"
        title_right_border="$title_left_border$title_filler"
    fi
    # set alignments by combining variables then clearing one of them.
    if [[ "$rightaligned" == "true" ]] ; then
        left_border="$left_border""$right_border"
        right_border=""
        title_left_border="$title_left_border""$title_right_border"
        title_right_border=""
    elif [[ "$leftaligned" == "true" ]] ; then
        right_border="$left_border""$right_border"
        left_border=""
        title_right_border="$title_left_border""$title_right_border"
        title_left_border=""
    fi
    # a side of the topbar may be longer (e.g. the right border)
    if (( ( terminal_width - ( padding * 2 ) - 1 ) % 2 == 0 ))
    then
        # the left and right bars have the same width
        left_bar=$bar
        right_bar=$left_bar
    else
        # the right bar has one more character than the left bar
        # the text is aligned leftmost
        left_bar=$bar
        right_bar="${bar}${topbar}"
    fi
    # undo all of this if we arent making boxes
    if [[ "$boxless" == "true" ]] ; then
        top_left_corner=""
        top_right_corner=""
        btm_left_corner=""
        btm_right_corner=""
        left_wall=""
        right_wall=""
        left_div_wall=""
        right_div_wall=""
        topbar=""
        title_filler=""
        filler=""
        left_bar=""
        right_bar=""
        left_border=""
        right_border=""
        title_left_border=""
        title_right_border=""
      fi
}

multibox(){
  local multi=("$@")
  for line in "${multi[@]}" ; do
      bento_vars
  printf "  ${left_wall}${left_border}${filler}${line}${filler}${right_border}${right_wall}\n"
  done
}

multititle(){
  local multi=("$@")
  for line in "${multi[@]}" ; do
      bento_vars
  printf "  ${left_wall}\033[7m${title_left_border}${title_filler}${line}${title_filler}${title_right_border}\033[27m${right_wall}\n"
  done
}

multisub(){
  local multi=("$@")
  for line in "${multi[@]}" ; do
      bento_vars
          echo ""
          printf "\33[A\33[2K\r%s"
      printf "\r%s  ${left_wall}${left_border}${filler}${line}${filler}${right_border}${right_wall}\n"
  done
}

multistep(){
  local multi=("$@")
  for line in "${multi[@]}" ; do
      bento_vars
      printf "     ${left_border}${filler}${line}${filler}${right_border} \n"
  done
}

# This is the code that makes the nice selection UI
# When 'tooltips=disabled' then tooltips won't be avaliable.
# Modified from https://unix.stackexchange.com/questions/146570/arrow-key-enter-menu/415155#415155
# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)

#<~> Menu Maker functions

function select_option {

    # set/unset selections when dealing with a multiple selection menu
    multimenu(){
        if [[ "$multiselection" == "true" ]] ; then
            for ((i = 0; i < ${#menu[@]}; ++i)); do
                # keep looping for every option to add them to our array
                if [[ "${menu[$i]}" == "Confirm Selection" ]] ; then
                    break # end loop at "Confirm Selection" dont let it or others after it be added to selection
                else
                    multimenu+=("${menu[$i]}")
                fi
            done
        fi
        if  [[ "$multiselection" == "true" ]] && [[ "${menu[$selected]}" == "Confirm Selection" ]] ; then
            break
        elif [[ "$multiselection" == "true" ]] && [[ "${multimenu[$selected]}" == "${menu[$selected]}" ]] ; then
            # toggle selection on or off
            toggle_selection
        else
            # standard menu function down here
            selection=("${menu[$selected]}")
            break
        fi
    }

toggle_selection(){
    # search already selected item to see if this option was already selected and deselect it
    # use the found variable to confirm if it was an exact match
    found="false"
    if [[ "${selection[*]}" =~ "${menu[$selected]}" ]] ; then
        for selectopt in "${selection[@]}" ; do
            if [[ "${selection[$selectopt]}" == "${menu[$selected]}" ]] ; then
                unset "selection[$selectopt]"
                found="true"
            fi
        done
    fi
    # If the option was not found in the selection
    if [[ "$found" == "false" ]] ; then
        selection+=("${menu[$selected]}")
    else # If it was found, clean up the arrays
        for i in "${selection[*]}" ; do
            temparr+=("${selection[@]}")
        done
        unset selection
        for i in "${temparr[*]}" ; do
            selection+=("${temparr[@]}")
        done
        unset temparr
    fi
}



echo""
    local menuopts=("$@")
    local terminal_height=$(tput lines)     # query the Terminfo database: number of lines
    local box_height=$(( terminal_height - 13 ))
    local terminal_width=$(tput cols)     # query the Terminfo database: number of columns
    local box_width=$(( terminal_width - 8 ))
    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }

#   control display of non-highlighted options
#   print_option()     { printf "\33[A\33[2K\r%s    $1 "; }
print_option()     {
    # check if option is among selections
    if [[ ${selection[@]} =~ "$1" ]]
    then
            hilite="$ESC[7m" && end_hilite="$ESC[27m"
        else
            hilite="" && end_hilite=""
    fi


    # set alignment
    if [[ "$mrightaligned" == "true" ]] ; then
                line="$1"
                bento_vars
                printf "\33[A\33[2K\r   $hilite $line $end_hilite${left_border}${right_border}"
    elif [[ "$mcenteraligned" == "true" ]] ; then
                line="$1"
                bento_vars
                printf "\33[A\33[2K\r  $hilite ${left_border}${right_border}$line $end_hilite"
    else
                printf "\33[A\33[2K\r%s   $hilite $1 $end_hilite"
    fi
    # turn highlights back off
        hilite="" && end_hilite=""
}

#   control display of currently-highlighted options
#   print_selected()   { printf "\33[A\33[2K\r%s ⮞ $ESC[7m $1 $ESC[27m";
print_selected()   {
    if [[ "$return" == "true" ]] || [[ "$exit" == "true" ]] ; then
        # dont bother displaying an option with these enabled
        printf " "
    else
    if [[ "$mrightaligned" == "true" ]] ; then
            line="$1"
            bento_vars
            printf "\33[A\33[2K\r ⮞ ${left_border}${right_border}$ESC[7m $line $ESC[27m"
    elif [[ "$mcenteraligned" == "true" ]] ; then
            line="$1"
            bento_vars
            printf "\33[A\33[2K\r ⮞ $ESC[7m $line $ESC[27m${left_border}${right_border}"
    else
            printf "\33[A\33[2K\r%s ⮞ $ESC[7m $1 $ESC[27m"
    fi fi
}

    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
                         if [[ $key = $ESC[A ]]; then echo up;     fi
                         if [[ $key = $ESC[B ]]; then echo down;   fi
                         if [[ $key = ""     ]]; then echo enter;  fi; }

    get_menuopts_total(){
      menuopts_length=0
        for x in "${menuopts[@]}" ; do
          ((menuopts_length++))
        done
      if [ $menuopts_length -gt $box_height ] ; then
         : # do nothing for now, this may be useful again later
      fi
    }


    # initially print empty new lines (scroll down if at bottom of screen)
    for opt ; do
    printf "\n"; done

    # determine current screen position for overwriting the options
    lastrow=`get_cursor_row`
    #local lastrow="$terminal_height"
    startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off


    get_subtitle_max_size(){
      subtitle_length=-1
        for x in "${submenu[@]}" ; do
          if [[ ${#x} -gt $subtitle_length ]] ; then
            subtitle_length=$(( ${#x} + 0 ))
          fi
        done
    }

    make_subtitles(){
      get_menuopts_total
      get_subtitle_max_size
      if [[ ! "$tooltips" == "disabled" ]] ; then
        cursor_to $lastrow
        printf "\33[A\33[2K\r%s\n"
        bento_subs
        printf "\33[2K\r%s\n"
        printf "\33[2K\r%s\n"
      fi
    }

    bento_subs(){
    if [[ -n "${submenu[$idx]}" ]] ; then
                if [[ "$srightaligned" == "true" ]] ; then
                    rightaligned="true"
                elif [[ "$sleftaligned" == "true" ]] ; then
                    leftaligned="true"
                fi
        line="${submenu[$idx]}"
        glyph="true"
        bento_vars
            printf "\r%s  ${top_left_corner}${left_bar}${topbar}${right_bar}${top_right_corner}\n"
            if (( (text_width + 8) > terminal_width )) ; then
            long_content="$(echo "$line" | fold -w $box_width -s)"
            IFS=$'\n'
            multi_array=($long_content)
            unset IFS
            multisub "${multi_array[@]}"
            else
                echo ""
                printf "\33[A\33[2K\r%s"
            printf "\r%s  ${left_wall}${left_border} $line ${right_border}${right_wall}\n"
            fi
        echo ""
        printf "\33[A\33[2K\r%s"
        printf "\r%s  ${btm_left_corner}${left_bar}${topbar}${right_bar}${btm_right_corner}\n"
        printf "\r%s"

                if [[ "$srightaligned" == "true" ]] || [[ "$sleftaligned" == "true" ]] ; then
                    rightaligned="false"
                    leftaligned="false"
                fi
    fi
    }

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
                make_subtitles
            else
                print_option "$opt"
            fi

            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) multimenu ;;
            up)    ((selected--));
                   if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
            down)  ((selected++));
                   if [ $selected -ge $# ]; then selected=0; fi;;
        esac
    done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on
    return $selected
}


function select_opt {
    select_option "$@" 1>&2
    local result=$?
    #echo $result
    return $result
}
#</>
#</>

bento_update(){
      update_failed="false"
      sudo mkdir -p /var/brunch/toolkit
      sudo chown -R $USER /var/brunch
      bento -t "Update" -c "Updating Bento, please wait..."
      curl -l https://raw.githubusercontent.com/WesBosch/brunch-toolkit/main/bento -o /var/brunch/toolkit/bento || update_failed="true"
      sudo install -Dt /usr/local/bin -m 755 /var/brunch/toolkit/bento || update_failed="true"
      rm /var/brunch/toolkit/bento
      if [[ "$update_failed" == "true" ]] ; then
      bento -t "Update" -c "Unable to update Bento!" "Make sure your internet connection is stable and try again." "You can also update manually by downloading Bento from:" "https://raw.githubusercontent.com/WesBosch/brunch-toolkit/main/bento" "then run: bash ~/Downloads/bento --install" -e
      else
          bento -t "Update" -c "Update succesful!" -e
      fi
}

bento_install(){
    install_failed="false"
    bento -t "Update" -c "Installing Bento $bento_version, please wait..."
    sudo install -Dt /usr/local/bin -m 755 "$0" || install_failed="true"
    if [[ "$update_failed" == "true" ]] ; then
    bento -t "Update" -c "Unable to update Bento!" 'Try moving Bento to /usr/local/bin manually, or to somewhere else in your $PATH' -e
    else
        bento -t "Update" -c "Install succesful!" -e
    fi
}

bento_debug(){
    bento -t "Test" -c "Testing multi select menu" -mm "one" "two" "three" "four" "five" "six" -m "seven" "eight" "Exit" -a
    case "$selection" in
        "Exit") exit 0 ;;
    esac
    bento -t "Results" -c "Here are the results" 'Array "${selection[@]}" returns the following:' "div" "${selection[@]}" "btm" "lid" "Test again?" -m "Restart" "Exit"
    case "$selection" in
        "Restart") bento -d ; return ;;
        "Exit") exit 0 ;;
    esac
}

#</>

bento "$@"
